#!/bin/zsh

# Counts the number of lines of all files or files with a given substring in 
# the current directory. If the -r or --recurse option is passed, counts the
# lines in every subdirectory


function _print_lines() {
  # Prints line counts of files in the given glob pattern, sorted in descending
  # order
  local count=$(wc -l $~1)
  # Gets the last line of the $count (the total)
  local total=${${(f)count}[-1]}
  if [[ $#total == 1 ]]; then
    # $total will be of length 1 if there is only one match to $count
    echo $count
  else
    # Removes the last line of $count, sorts, and appends the last line again
    echo $count | sed '$d' | sort --reverse | cat - <(echo $total)
  fi
}

if [[ $# > 2 ]]; then
  echo 'Too many arguments'
  unfunction _print_lines
  return 1
fi

if [[ -z $1 ]]; then
  _print_lines '*(.)'
  unfunction _print_lines
  return 0
fi

case $1 in
  '-r' | '--recurse')
    local pattern='**/'
    if [[ -n $2 ]]; then
      pattern+="*$2"
    fi
    pattern+='*(.)'
    _print_lines $pattern
    ;;
  *)
    if [[ $2 == '-r' || $2 == '--recurse' ]]; then
      # Prefixes glob pattern with the 'every subdirectory' match
      local pattern='**/'
    fi
    pattern+="*$1*(.)"
    _print_lines $pattern
esac

# Needed for weird behavior with +=
unset pattern
unfunction _print_lines
