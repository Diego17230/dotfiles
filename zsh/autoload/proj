#!/bin/zsh

# proj creates a copies files from a template with a given name. Any instances
# of PROJNAME in the template are replaced with the root directory name. An
# optional -g or --git flag can be passed to create a git repo locally.


if [[ $# != 1 && $# != 2 ]]; then
  echo 'Usage: proj <project type> [options...]'
  return 1
fi

zmodload zsh/zutil

local git
zparseopts -D -E -F - g=git -git=git || exit 1

if [[ -n $git && $# == 1 ]]; then
  git init
fi

# Glob patterns match files starting with . too
setopt GLOB_DOTS
local available=($(ls ~/.dotfiles/zsh/autoload/resources/proj(/) | sed 's/all//g'))
local proj_name=${PWD:t}

if [[ ! " ${available[*]} " =~ " $1 " ]]; then
  echo 'Available types:'
  local proj_type
  for proj_type in $available; do
    echo "  $proj_type"
  done
  return 1
fi

case $1 in
  'go')
    go mod init github.com/dzfrias/$proj_name
    ;;
  'vim')
    # Remove 'vim-' suffix of project name if it exists
    local proj_name=${${PWD:t}#vim-}
esac

cp -R ~/.dotfiles/zsh/autoload/resources/proj/all/* .
# Copy everything recursively and overwrite clashing files
cp -Rf ~/.dotfiles/zsh/autoload/resources/proj/$1/* .

local -A exts
local file
for file in $(ls **/*(.)); do
  local ext=${file:e}
  exts[$ext]=1
done
for ext in ${(k)exts}; do
  fd 'PROJNAME\..+' -x mv {} {//}/$proj_name.$ext
done
fd 'PROJNAME' --type directory --exec mv {} {//}/$proj_name

# To get around gitignore
mv projections.json .projections.json
if [[ -f vimspector.json ]]; then
  mv vimspector.json .vimspector.json
fi

rplc "PROJNAME/$proj_name" **/*(.)
